# 문제접근: Tree 순회를 구현
import sys
# 테스트 케이스 6,7 틀림 왜지?  > python 기본 재귀 최대횟수는 1000번뿐이라
sys.setrecursionlimit(10**6) # 리미트 해제 
# preorder 구현
def preorder(arrY,arrX,answer):
    node = arrY[0]  # root 
    idx = arrX.index(node)
    arrY1 = []
    arrY2 = []
    
    for i in range(1, len(arrY)):
        if node[0] > arrY[i][0]: # x축 값이 더 작으면 , 왼쪽 노드  
            arrY1.append(arrY[i])
        else:
            arrY2.append(arrY[i])# x축 값이 더 크면 , 오른쪽 노드  
            
            
    answer.append(node[2]) # root먼저 
    
    if len(arrY1) > 0:
        preorder(arrY1, arrX[:idx], answer) # 왼쪽  
    if len(arrY2) > 0:
        preorder(arrY2, arrX[idx + 1:], answer) # 오른쪽
    return
# postorder 구현
def postorder(arrY,arrX,answer):
    node = arrY[0]  # root 
    idx = arrX.index(node)
    arrY1 = []
    arrY2 = []
    
    for i in range(1, len(arrY)):
        if node[0] > arrY[i][0]: # x축 값이 더 작으면 , 왼쪽 노드  
            arrY1.append(arrY[i])
        else:
            arrY2.append(arrY[i])# x축 값이 더 크면 , 오른쪽 노드  
            
            
    
    
    if len(arrY1) > 0:
        postorder(arrY1, arrX[:idx], answer) # 왼쪽  
    if len(arrY2) > 0:
        postorder(arrY2, arrX[idx + 1:], answer) # 오른쪽
    answer.append(node[2]) # root는 가장 마지막에 
    return
# 1차원 리스트를 트리 구조로 변환하는 과정필요  


def solution(nodeinfo):
    answer1= []
    answer2 =[]
    
    # 각 좌표에 노드번호 부여
    for i in range(len(nodeinfo)):
        nodeinfo[i].append(i+1)  # nodeinfo[i][2]은 노드 번호 
        
    # y 좌표를 기준으로 내림차순 정렬 >>   가장 앞이 root노드 
    arrY = sorted(nodeinfo, key = lambda x : (-x[1], x[0]))
    arrX = sorted(nodeinfo)
    
    preorder(arrY, arrX, answer1)
    postorder(arrY, arrX, answer2)
        
    return [answer1,answer2]