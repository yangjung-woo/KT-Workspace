# 탐욕법: 현재 상황에서 가장 좋은 것(최선의 선택)을 고르는 알고리즘

# 단속카메라가 모든 차량을 검사할 수 있어야 함 (진입, 탈출)
# 놓치는 자동차가 없도록 > 최소한 탈출 이전에는 카메라를 설치해야 함 

# 1. 탈출  기준으로 오름차순 정렬 ()
# 2. 카메라 설치위치 이전 진입했다면 감지됨 (진입< 카메라 설치 지점 )
#    하지만 카메라설치 지점 이후에 진입했다면 놓치게됨  (진입 > 카메라 설치 지점)
      # 이 경우에 카메라 추가를 해야 함 

def solution(routes):
    answer = 0
    
    camera_position = -30001 # 초기 카메라는 최소값
    routes.sort(key=lambda x: x[1]) # 탈출치점 순으로 정렬 
    
    for start, end in routes :
        if start > camera_position: # 하지만 카메라설치 지점 이후에 진입했다면 놓치게됨  (진입 > 카메라 설치 지점)
            # 카메라를 하나 더 설치해야 함 
            answer += 1
            # 카메라를 탈출 지점에 설치
            # 놓치는 자동차가 없도록 > 최소한 탈출 이전에는 카메라를 설치해야 함
            camera_position = end

    
    return answer

solution([[-20,-15], [-14,-5], [-18,-13], [-5,-3]])