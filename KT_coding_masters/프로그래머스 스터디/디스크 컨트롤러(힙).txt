# 문제접근 
# 1. 동시에 처리할 수 있는 두작업 중 작업에 걸리는 소요시간이 짧은 것 부터 하는게 이득
# 2. 동일한 시점에 온 작업(충돌 시)을  "소요 시간"을 기준으로 최소 힙에 저장 
# 3. 그리디? 
import heapq
def solution(jobs):
    
    answer = 0
    now = 0# 현재 시간
    i =0 # 처리 개수
    start = -1 # 마지막 완료 시간 
    heap = []
    while i < len(jobs):
        for j in jobs:
            if start < j[0] <= now: # 현재 작업중인 상태 (힙에서 대기) 
                heapq.heappush(heap,[j[1],j[0]]) # 소요시간을 기준으로 최소힙에 저장 
        if heap:
            work_duration, start_time = heapq.heappop(heap) # 소요시간 , 요청시점 
            start = now  # 작업을 시작 한 시간 갱신
            now += work_duration # 작업을 끝마친 시간 = queue에서 뽑은 소요시간 만큼 
            answer  += now - start_time #  요청시간 부터 종료까지 시간을 더함
            i+=1
        else: # 대기하는 작업이 없음 
            now += 1 
    return answer // len(jobs)